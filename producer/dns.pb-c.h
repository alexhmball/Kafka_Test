/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: dns.proto */

#ifndef PROTOBUF_C_dns_2eproto__INCLUDED
#define PROTOBUF_C_dns_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "main.pb-c.h"

typedef struct App__DnsQuery App__DnsQuery;
typedef struct App__DnsRrTypeAData App__DnsRrTypeAData;
typedef struct App__DnsRrTypeAAAAData App__DnsRrTypeAAAAData;
typedef struct App__DnsRrTypeMxData App__DnsRrTypeMxData;
typedef struct App__DnsRrTypeNsData App__DnsRrTypeNsData;
typedef struct App__DnsRrTypePtrData App__DnsRrTypePtrData;
typedef struct App__DnsRr App__DnsRr;
typedef struct App__DNS App__DNS;


/* --- enums --- */

typedef enum _App__DnsMssgType {
  APP__DNS_MSSG_TYPE__DNS_MESSA_UNKNOWN = 0,
  APP__DNS_MSSG_TYPE__DNS_QUERY = 1,
  APP__DNS_MSSG_TYPE__DNS_RESPONSE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(APP__DNS_MSSG_TYPE)
} App__DnsMssgType;
typedef enum _App__DnsRrType {
  APP__DNS_RR_TYPE__DNS_RR_UNKNOWN = 0,
  APP__DNS_RR_TYPE__DNS_RR_A = 1,
  APP__DNS_RR_TYPE__DNS_RR_AAAA = 2,
  APP__DNS_RR_TYPE__DNS_RR_MX = 3,
  APP__DNS_RR_TYPE__DNS_RR_NS = 4,
  APP__DNS_RR_TYPE__DNS_RR_PTR = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(APP__DNS_RR_TYPE)
} App__DnsRrType;
typedef enum _App__DnsClass {
  APP__DNS_CLASS__DNS_CLASS_UNKNOWN = 0,
  APP__DNS_CLASS__DNS_CLASS_IN = 1,
  APP__DNS_CLASS__DNS_CLASS_NONE = 2,
  APP__DNS_CLASS__DNS_CLASS_ANY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(APP__DNS_CLASS)
} App__DnsClass;

/* --- messages --- */

struct  App__DnsQuery
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
  App__DnsRrType type;
  App__DnsClass class_;
};
#define APP__DNS_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_query__descriptor) \
    , {0,NULL}, APP__DNS_RR_TYPE__DNS_RR_UNKNOWN, APP__DNS_CLASS__DNS_CLASS_UNKNOWN }


/*
 *A record
 */
struct  App__DnsRrTypeAData
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
};
#define APP__DNS_RR_TYPE_ADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_rr_type_adata__descriptor) \
    , {0,NULL} }


/*
 *AAAA record
 */
struct  App__DnsRrTypeAAAAData
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
};
#define APP__DNS_RR_TYPE_AAAADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_rr_type_aaaadata__descriptor) \
    , {0,NULL} }


/*
 *MX record
 */
struct  App__DnsRrTypeMxData
{
  ProtobufCMessage base;
  uint32_t preference;
  ProtobufCBinaryData mail_exchange;
};
#define APP__DNS_RR_TYPE_MX_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_rr_type_mx_data__descriptor) \
    , 0, {0,NULL} }


/*
 *NS record
 */
struct  App__DnsRrTypeNsData
{
  ProtobufCMessage base;
  ProtobufCBinaryData name_server;
};
#define APP__DNS_RR_TYPE_NS_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_rr_type_ns_data__descriptor) \
    , {0,NULL} }


/*
 *PTR record
 */
struct  App__DnsRrTypePtrData
{
  ProtobufCMessage base;
  ProtobufCBinaryData domain_name;
};
#define APP__DNS_RR_TYPE_PTR_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_rr_type_ptr_data__descriptor) \
    , {0,NULL} }


typedef enum {
  APP__DNS_RR__RR_DATA__NOT_SET = 0,
  APP__DNS_RR__RR_DATA_A_DATA = 6,
  APP__DNS_RR__RR_DATA_AAAA_DATA = 7,
  APP__DNS_RR__RR_DATA_MX_DATA = 8,
  APP__DNS_RR__RR_DATA_NS_DATA = 9,
  APP__DNS_RR__RR_DATA_PTR_DATA = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(APP__DNS_RR__RR_DATA__CASE)
} App__DnsRr__RrDataCase;

struct  App__DnsRr
{
  ProtobufCMessage base;
  ProtobufCBinaryData name;
  App__DnsRrType type;
  App__DnsClass class_;
  uint32_t ttl;
  uint32_t rdlength;
  App__DnsRr__RrDataCase rr_data_case;
  union {
    App__DnsRrTypeAData *a_data;
    App__DnsRrTypeAAAAData *aaaa_data;
    App__DnsRrTypeMxData *mx_data;
    App__DnsRrTypeNsData *ns_data;
    App__DnsRrTypePtrData *ptr_data;
  };
};
#define APP__DNS_RR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns_rr__descriptor) \
    , {0,NULL}, APP__DNS_RR_TYPE__DNS_RR_UNKNOWN, APP__DNS_CLASS__DNS_CLASS_UNKNOWN, 0, 0, APP__DNS_RR__RR_DATA__NOT_SET, {0} }


struct  App__DNS
{
  ProtobufCMessage base;
  App__Connection *connection;
  App__DnsMssgType mssg_type;
  size_t n_questions;
  App__DnsQuery **questions;
  size_t n_rrs;
  App__DnsRr **rrs;
};
#define APP__DNS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&app__dns__descriptor) \
    , NULL, APP__DNS_MSSG_TYPE__DNS_MESSA_UNKNOWN, 0,NULL, 0,NULL }


/* App__DnsQuery methods */
void   app__dns_query__init
                     (App__DnsQuery         *message);
size_t app__dns_query__get_packed_size
                     (const App__DnsQuery   *message);
size_t app__dns_query__pack
                     (const App__DnsQuery   *message,
                      uint8_t             *out);
size_t app__dns_query__pack_to_buffer
                     (const App__DnsQuery   *message,
                      ProtobufCBuffer     *buffer);
App__DnsQuery *
       app__dns_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_query__free_unpacked
                     (App__DnsQuery *message,
                      ProtobufCAllocator *allocator);
/* App__DnsRrTypeAData methods */
void   app__dns_rr_type_adata__init
                     (App__DnsRrTypeAData         *message);
size_t app__dns_rr_type_adata__get_packed_size
                     (const App__DnsRrTypeAData   *message);
size_t app__dns_rr_type_adata__pack
                     (const App__DnsRrTypeAData   *message,
                      uint8_t             *out);
size_t app__dns_rr_type_adata__pack_to_buffer
                     (const App__DnsRrTypeAData   *message,
                      ProtobufCBuffer     *buffer);
App__DnsRrTypeAData *
       app__dns_rr_type_adata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_rr_type_adata__free_unpacked
                     (App__DnsRrTypeAData *message,
                      ProtobufCAllocator *allocator);
/* App__DnsRrTypeAAAAData methods */
void   app__dns_rr_type_aaaadata__init
                     (App__DnsRrTypeAAAAData         *message);
size_t app__dns_rr_type_aaaadata__get_packed_size
                     (const App__DnsRrTypeAAAAData   *message);
size_t app__dns_rr_type_aaaadata__pack
                     (const App__DnsRrTypeAAAAData   *message,
                      uint8_t             *out);
size_t app__dns_rr_type_aaaadata__pack_to_buffer
                     (const App__DnsRrTypeAAAAData   *message,
                      ProtobufCBuffer     *buffer);
App__DnsRrTypeAAAAData *
       app__dns_rr_type_aaaadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_rr_type_aaaadata__free_unpacked
                     (App__DnsRrTypeAAAAData *message,
                      ProtobufCAllocator *allocator);
/* App__DnsRrTypeMxData methods */
void   app__dns_rr_type_mx_data__init
                     (App__DnsRrTypeMxData         *message);
size_t app__dns_rr_type_mx_data__get_packed_size
                     (const App__DnsRrTypeMxData   *message);
size_t app__dns_rr_type_mx_data__pack
                     (const App__DnsRrTypeMxData   *message,
                      uint8_t             *out);
size_t app__dns_rr_type_mx_data__pack_to_buffer
                     (const App__DnsRrTypeMxData   *message,
                      ProtobufCBuffer     *buffer);
App__DnsRrTypeMxData *
       app__dns_rr_type_mx_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_rr_type_mx_data__free_unpacked
                     (App__DnsRrTypeMxData *message,
                      ProtobufCAllocator *allocator);
/* App__DnsRrTypeNsData methods */
void   app__dns_rr_type_ns_data__init
                     (App__DnsRrTypeNsData         *message);
size_t app__dns_rr_type_ns_data__get_packed_size
                     (const App__DnsRrTypeNsData   *message);
size_t app__dns_rr_type_ns_data__pack
                     (const App__DnsRrTypeNsData   *message,
                      uint8_t             *out);
size_t app__dns_rr_type_ns_data__pack_to_buffer
                     (const App__DnsRrTypeNsData   *message,
                      ProtobufCBuffer     *buffer);
App__DnsRrTypeNsData *
       app__dns_rr_type_ns_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_rr_type_ns_data__free_unpacked
                     (App__DnsRrTypeNsData *message,
                      ProtobufCAllocator *allocator);
/* App__DnsRrTypePtrData methods */
void   app__dns_rr_type_ptr_data__init
                     (App__DnsRrTypePtrData         *message);
size_t app__dns_rr_type_ptr_data__get_packed_size
                     (const App__DnsRrTypePtrData   *message);
size_t app__dns_rr_type_ptr_data__pack
                     (const App__DnsRrTypePtrData   *message,
                      uint8_t             *out);
size_t app__dns_rr_type_ptr_data__pack_to_buffer
                     (const App__DnsRrTypePtrData   *message,
                      ProtobufCBuffer     *buffer);
App__DnsRrTypePtrData *
       app__dns_rr_type_ptr_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_rr_type_ptr_data__free_unpacked
                     (App__DnsRrTypePtrData *message,
                      ProtobufCAllocator *allocator);
/* App__DnsRr methods */
void   app__dns_rr__init
                     (App__DnsRr         *message);
size_t app__dns_rr__get_packed_size
                     (const App__DnsRr   *message);
size_t app__dns_rr__pack
                     (const App__DnsRr   *message,
                      uint8_t             *out);
size_t app__dns_rr__pack_to_buffer
                     (const App__DnsRr   *message,
                      ProtobufCBuffer     *buffer);
App__DnsRr *
       app__dns_rr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns_rr__free_unpacked
                     (App__DnsRr *message,
                      ProtobufCAllocator *allocator);
/* App__DNS methods */
void   app__dns__init
                     (App__DNS         *message);
size_t app__dns__get_packed_size
                     (const App__DNS   *message);
size_t app__dns__pack
                     (const App__DNS   *message,
                      uint8_t             *out);
size_t app__dns__pack_to_buffer
                     (const App__DNS   *message,
                      ProtobufCBuffer     *buffer);
App__DNS *
       app__dns__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   app__dns__free_unpacked
                     (App__DNS *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*App__DnsQuery_Closure)
                 (const App__DnsQuery *message,
                  void *closure_data);
typedef void (*App__DnsRrTypeAData_Closure)
                 (const App__DnsRrTypeAData *message,
                  void *closure_data);
typedef void (*App__DnsRrTypeAAAAData_Closure)
                 (const App__DnsRrTypeAAAAData *message,
                  void *closure_data);
typedef void (*App__DnsRrTypeMxData_Closure)
                 (const App__DnsRrTypeMxData *message,
                  void *closure_data);
typedef void (*App__DnsRrTypeNsData_Closure)
                 (const App__DnsRrTypeNsData *message,
                  void *closure_data);
typedef void (*App__DnsRrTypePtrData_Closure)
                 (const App__DnsRrTypePtrData *message,
                  void *closure_data);
typedef void (*App__DnsRr_Closure)
                 (const App__DnsRr *message,
                  void *closure_data);
typedef void (*App__DNS_Closure)
                 (const App__DNS *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    app__dns_mssg_type__descriptor;
extern const ProtobufCEnumDescriptor    app__dns_rr_type__descriptor;
extern const ProtobufCEnumDescriptor    app__dns_class__descriptor;
extern const ProtobufCMessageDescriptor app__dns_query__descriptor;
extern const ProtobufCMessageDescriptor app__dns_rr_type_adata__descriptor;
extern const ProtobufCMessageDescriptor app__dns_rr_type_aaaadata__descriptor;
extern const ProtobufCMessageDescriptor app__dns_rr_type_mx_data__descriptor;
extern const ProtobufCMessageDescriptor app__dns_rr_type_ns_data__descriptor;
extern const ProtobufCMessageDescriptor app__dns_rr_type_ptr_data__descriptor;
extern const ProtobufCMessageDescriptor app__dns_rr__descriptor;
extern const ProtobufCMessageDescriptor app__dns__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_dns_2eproto__INCLUDED */
